{"ast":null,"code":"import { ɵɵinject } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nclass myAuth {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (localStorage.getItem('authToken') != null) return true;\n    this.router.navigate(['/welcome']);\n    return false;\n  }\n  static #_ = this.ɵfac = function myAuth_Factory(t) {\n    return new (t || myAuth)(i0.ɵɵinject(i1.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: myAuth,\n    factory: myAuth.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport const authGuard = (route, state) => {\n  const authService = ɵɵinject(AuthService);\n  // Check if the user is logged in using the AuthService\n  if (authService.loggedIn()) {\n    return true; // If logged in, allow access to the route\n  } else {\n    return false; // If not logged in, deny access to the route\n  }\n  // return inject(myAuth).canActivate(route, state);\n};","map":{"version":3,"names":["ɵɵinject","AuthService","myAuth","constructor","router","canActivate","route","state","localStorage","getItem","navigate","_","i0","i1","Router","_2","factory","ɵfac","providedIn","authGuard","authService","loggedIn"],"sources":["C:\\Users\\kagiso\\Desktop\\Projects\\Angular app2\\Angular app\\cageapp\\src\\app\\Auth\\auth.guard.ts"],"sourcesContent":["import { Injectable, inject, ɵɵinject } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';\nimport { map, catchError } from 'rxjs';\nimport { AuthService } from '../_services/auth.service';\nimport { User } from '../_models/user';\nimport { AuthInterceptor } from '../_services/auth.interceptor';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\n\nclass myAuth{\n  constructor( private router: Router){}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean{\n     \n      if(localStorage.getItem('authToken') !=null)\n      return true;\n      this.router.navigate(['/welcome']);\n      return false;\n    \n    }\n  \n}\n\nexport const authGuard: CanActivateFn = (route, state) => {\n\n  const authService =  ɵɵinject(AuthService);\n\n  // Check if the user is logged in using the AuthService\n  if (authService.loggedIn()) {\n    return true;  // If logged in, allow access to the route\n  } else {\n    return false; // If not logged in, deny access to the route\n  }\n  // return inject(myAuth).canActivate(route, state);\n};\n\n\n"],"mappings":"AAAA,SAA6BA,QAAQ,QAAQ,eAAe;AAG5D,SAASC,WAAW,QAAQ,2BAA2B;;;AAKvD,MAMMC,MAAM;EACVC,YAAqBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAU;EACrCC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAExB,IAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAG,IAAI,EAC3C,OAAO,IAAI;IACX,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;IAClC,OAAO,KAAK;EAEd;EAAC,QAAAC,CAAA,G;qBAXCT,MAAM,EAAAU,EAAA,CAAAZ,QAAA,CAAAa,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAANb,MAAM;IAAAc,OAAA,EAANd,MAAM,CAAAe,IAAA;IAAAC,UAAA,EALE;EAAM;;AAoBpB,OAAO,MAAMC,SAAS,GAAkBA,CAACb,KAAK,EAAEC,KAAK,KAAI;EAEvD,MAAMa,WAAW,GAAIpB,QAAQ,CAACC,WAAW,CAAC;EAE1C;EACA,IAAImB,WAAW,CAACC,QAAQ,EAAE,EAAE;IAC1B,OAAO,IAAI,CAAC,CAAE;GACf,MAAM;IACL,OAAO,KAAK,CAAC,CAAC;;EAEhB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}