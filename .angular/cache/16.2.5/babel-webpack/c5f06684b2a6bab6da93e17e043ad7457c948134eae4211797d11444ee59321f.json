{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { map, take } from 'rxjs';\nimport { AuthService } from '../_services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nclass myAuth {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (localStorage.getItem('authToken') != null) return true;\n    this.router.navigate(['/welcome']);\n    return false;\n  }\n  static #_ = this.ɵfac = function myAuth_Factory(t) {\n    return new (t || myAuth)(i0.ɵɵinject(i1.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: myAuth,\n    factory: myAuth.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport const authGuard = (route, state) => {\n  return inject(AuthService).authenticated.pipe(take(1), map(status => {\n    console.log('auth status: ', status);\n    if (!status) {\n      return inject(Router).createUrlTree(['/welcome']);\n    }\n    return true;\n  }));\n  // return inject(myAuth).canActivate(route, state);\n};","map":{"version":3,"names":["inject","Router","map","take","AuthService","myAuth","constructor","router","canActivate","route","state","localStorage","getItem","navigate","_","i0","ɵɵinject","i1","_2","factory","ɵfac","providedIn","authGuard","authenticated","pipe","status","console","log","createUrlTree"],"sources":["C:\\Users\\kagiso\\Desktop\\Projects\\Angular app2\\Angular app\\cageapp\\src\\app\\Auth\\auth.guard.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';\nimport { map, catchError, take } from 'rxjs';\nimport { AuthService } from '../_services/auth.service';\nimport { User } from '../_models/user';\nimport { AuthInterceptor } from '../_services/auth.interceptor';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nclass myAuth{\n  constructor( private router: Router){}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean{\n      if(localStorage.getItem('authToken') !=null)\n      return true;\n      this.router.navigate(['/welcome']);\n      return false;\n      \n    \n    }\n  \n}\n\nexport const authGuard: CanActivateFn = (route, state) => {\n  return inject(AuthService).authenticated.pipe(\n    take(1),\n    map((status) => {\n      console.log('auth status: ', status);\n      if (!status) {\n        return inject(Router).createUrlTree(['/welcome']);\n      }\n      return true;\n    })\n  );\n  // return inject(myAuth).canActivate(route, state);\n};\n\n\n"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAAgDC,MAAM,QAA6B,iBAAiB;AACpG,SAASC,GAAG,EAAcC,IAAI,QAAQ,MAAM;AAC5C,SAASC,WAAW,QAAQ,2BAA2B;;;AAKvD,MAIMC,MAAM;EACVC,YAAqBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAU;EACrCC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IACxB,IAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAG,IAAI,EAC3C,OAAO,IAAI;IACX,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;IAClC,OAAO,KAAK;EAGd;EAAC,QAAAC,CAAA,G;qBAXCT,MAAM,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhB,MAAA;EAAA;EAAA,QAAAiB,EAAA,G;WAANb,MAAM;IAAAc,OAAA,EAANd,MAAM,CAAAe,IAAA;IAAAC,UAAA,EAHE;EAAM;;AAkBpB,OAAO,MAAMC,SAAS,GAAkBA,CAACb,KAAK,EAAEC,KAAK,KAAI;EACvD,OAAOV,MAAM,CAACI,WAAW,CAAC,CAACmB,aAAa,CAACC,IAAI,CAC3CrB,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAAEuB,MAAM,IAAI;IACbC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,MAAM,CAAC;IACpC,IAAI,CAACA,MAAM,EAAE;MACX,OAAOzB,MAAM,CAACC,MAAM,CAAC,CAAC2B,aAAa,CAAC,CAAC,UAAU,CAAC,CAAC;;IAEnD,OAAO,IAAI;EACb,CAAC,CAAC,CACH;EACD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}