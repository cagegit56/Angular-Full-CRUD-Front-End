{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  intercept(req, next) {\n    const token = localStorage.getItem('userToken1');\n    if (token) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: 'Bearer ${token}'\n        }\n      });\n    }\n    return next.handle(req);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["AuthInterceptor","intercept","req","next","token","localStorage","getItem","clone","setHeaders","Authorization","handle","_","_2","factory","ɵfac"],"sources":["C:\\Users\\kagiso\\Desktop\\Projects\\Angular app2\\Angular app\\cageapp\\src\\app\\_services\\auth.interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor{\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>{\r\n\r\n        const token = localStorage.getItem('userToken1');\r\n\r\n        if(token){\r\n            req = req.clone({\r\n                setHeaders: {Authorization: 'Bearer ${token}'},\r\n            });\r\n        }\r\n        return next.handle(req);\r\n\r\n    } \r\n\r\n}\r\n\r\n"],"mappings":";AAOA,OAAM,MAAOA,eAAe;EACxBC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAE9C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAEhD,IAAGF,KAAK,EAAC;MACLF,GAAG,GAAGA,GAAG,CAACK,KAAK,CAAC;QACZC,UAAU,EAAE;UAACC,aAAa,EAAE;QAAiB;OAChD,CAAC;;IAEN,OAAON,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC;EAE3B;EAAC,QAAAS,CAAA,G;qBAZQX,eAAe;EAAA;EAAA,QAAAY,EAAA,G;WAAfZ,eAAe;IAAAa,OAAA,EAAfb,eAAe,CAAAc;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}