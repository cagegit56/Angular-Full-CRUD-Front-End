{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = environment.apiUrl + \"/employee\";\nexport class EmpService {\n  constructor(http) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        \"Access-Control-Allow-Origin\": \"*\"\n      }),\n      responseType: 'text'\n    };\n  }\n  getAll() {\n    return this.http.get(baseUrl);\n  }\n  getById(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  create(params) {\n    return this.http.post(baseUrl, params, this.httpOptions);\n  }\n  update(params) {\n    return this.http.put(`${baseUrl}`, params, this.httpOptions);\n  }\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`, this.httpOptions);\n  }\n  static #_ = this.ɵfac = function EmpService_Factory(t) {\n    return new (t || EmpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmpService,\n    factory: EmpService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","baseUrl","apiUrl","EmpService","constructor","http","httpOptions","headers","responseType","getAll","get","getById","id","create","params","post","update","put","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\User\\Desktop\\Angular app2\\Angular app\\cageapp\\src\\app\\_services\\emp.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { Emp } from '../_models/emp';\n\nconst baseUrl = environment.apiUrl + \"/employee\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmpService {\n\n  constructor(private http: HttpClient) { }\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      \"Access-Control-Allow-Origin\": \"*\"\n    }), responseType: 'text' as 'json'\n  };\n\n  getAll() {\n    return this.http.get<Emp[]>(baseUrl);\n  }\n\n  getById(id: number) {\n    return this.http.get<Emp>(`${baseUrl}/${id}`);\n  }\n\n  create(params: any) {\n    return this.http.post(baseUrl, params, this.httpOptions);\n  }\n\n  update(params: any) {\n    return this.http.put(`${baseUrl}`, params, this.httpOptions);\n  }\n\n  delete(id: number) {\n    return this.http.delete(`${baseUrl}/${id}`,this.httpOptions);\n  }\n\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,WAAW,QAAQ,gCAAgC;;;AAG5D,MAAMC,OAAO,GAAGD,WAAW,CAACE,MAAM,GAAG,WAAW;AAKhD,OAAM,MAAOC,UAAU;EAErBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAExB,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIR,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,6BAA6B,EAAE;OAChC,CAAC;MAAES,YAAY,EAAE;KACnB;EAPuC;EASxCC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAQT,OAAO,CAAC;EACtC;EAEAU,OAAOA,CAACC,EAAU;IAChB,OAAO,IAAI,CAACP,IAAI,CAACK,GAAG,CAAM,GAAGT,OAAO,IAAIW,EAAE,EAAE,CAAC;EAC/C;EAEAC,MAAMA,CAACC,MAAW;IAChB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAACd,OAAO,EAAEa,MAAM,EAAE,IAAI,CAACR,WAAW,CAAC;EAC1D;EAEAU,MAAMA,CAACF,MAAW;IAChB,OAAO,IAAI,CAACT,IAAI,CAACY,GAAG,CAAC,GAAGhB,OAAO,EAAE,EAAEa,MAAM,EAAE,IAAI,CAACR,WAAW,CAAC;EAC9D;EAEAY,MAAMA,CAACN,EAAU;IACf,OAAO,IAAI,CAACP,IAAI,CAACa,MAAM,CAAC,GAAGjB,OAAO,IAAIW,EAAE,EAAE,EAAC,IAAI,CAACN,WAAW,CAAC;EAC9D;EAAC,QAAAa,CAAA,G;qBA7BUhB,UAAU,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVrB,UAAU;IAAAsB,OAAA,EAAVtB,UAAU,CAAAuB,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}