{"ast":null,"code":"import { inject } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nclass myAuth {\n  canActivate(route, state) {\n    return true;\n  }\n  static #_ = this.ɵfac = function myAuth_Factory(t) {\n    return new (t || myAuth)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: myAuth,\n    factory: myAuth.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport const authGuard = (route, state) => {\n  return inject(myAuth).canActivate(route, state);\n};","map":{"version":3,"names":["inject","myAuth","canActivate","route","state","_","_2","factory","ɵfac","providedIn","authGuard"],"sources":["C:\\Users\\kagiso\\Desktop\\Projects\\Angular app2\\Angular app\\cageapp\\src\\app\\Auth\\auth.guard.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateFn, RouterStateSnapshot } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nclass myAuth{\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean{return true}\n  \n}\n\nexport const authGuard: CanActivateFn = (route, state) => {\n  return inject(myAuth).canActivate(route, state);\n};\n"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;;AAIlD,MAIMC,MAAM;EACVC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAAW,OAAO,IAAI;EAAA;EAAC,QAAAC,CAAA,G;qBAH/CJ,MAAM;EAAA;EAAA,QAAAK,EAAA,G;WAANL,MAAM;IAAAM,OAAA,EAANN,MAAM,CAAAO,IAAA;IAAAC,UAAA,EAHE;EAAM;;AAUpB,OAAO,MAAMC,SAAS,GAAkBA,CAACP,KAAK,EAAEC,KAAK,KAAI;EACvD,OAAOJ,MAAM,CAACC,MAAM,CAAC,CAACC,WAAW,CAACC,KAAK,EAAEC,KAAK,CAAC;AACjD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}