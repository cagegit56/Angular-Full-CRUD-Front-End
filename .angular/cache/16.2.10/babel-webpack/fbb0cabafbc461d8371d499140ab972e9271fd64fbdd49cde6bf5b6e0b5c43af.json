{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable, inject } from '@angular/core';\nlet myAuth = class myAuth {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (localStorage.getItem('authToken')) {\n      return true;\n    }\n    return false;\n  }\n};\nmyAuth = __decorate([Injectable({\n  providedIn: 'root'\n})], myAuth);\nexport const authGuard = (route, state) => {\n  return inject(myAuth).canActivate(route, state);\n};","map":{"version":3,"names":["Injectable","inject","myAuth","constructor","router","canActivate","route","state","localStorage","getItem","__decorate","providedIn","authGuard"],"sources":["C:\\Users\\kagiso\\Desktop\\Projects\\Angular app2\\Angular app\\cageapp\\src\\app\\Auth\\auth.guard.ts"],"sourcesContent":["import { Injectable, inject, ɵɵinject } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\n\nclass myAuth{\n  constructor( private router: Router){}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean{\n     \n      if(localStorage.getItem('authToken') ){\n      return true;\n      }\n      return false;\n    \n    }\n  \n}\n\nexport const authGuard: CanActivateFn = (route, state) => {\n  \n  return inject(myAuth).canActivate(route, state);\n};\n\n\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,MAAM,QAAkB,eAAe;AAW5D,IAAMC,MAAM,GAAZ,MAAMA,MAAM;EACVC,YAAqBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAU;EACrCC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAExB,IAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAE;MACtC,OAAO,IAAI;;IAEX,OAAO,KAAK;EAEd;CAEH;AAbKP,MAAM,GAAAQ,UAAA,EANXV,UAAU,CAAC;EACVW,UAAU,EAAE;CACb,CAAC,C,EAIIT,MAAM,CAaX;AAED,OAAO,MAAMU,SAAS,GAAkBA,CAACN,KAAK,EAAEC,KAAK,KAAI;EAEvD,OAAON,MAAM,CAACC,MAAM,CAAC,CAACG,WAAW,CAACC,KAAK,EAAEC,KAAK,CAAC;AACjD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}